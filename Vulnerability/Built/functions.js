var functions = {};

functions.readRuralUrban = function(data, csv){
    // var data_ = ['County', 'FIPS code', 'Rural/Urban (0-3)'];
    var data_ = [];
    var csvdata = [];
    csv = csv.split('\n');
    csv.forEach(function(item){
        item = item.split(',');
        csvdata.push([
            item[2], // county
            item[1], // state
            item[0], // FIPS code
            item[4] // rural/urban (1-6)
        ]);
    });
    csvdata = csvdata.filter(function(item){
        if(item[1] == 'FL'){
            return true;
        }
        else{
            return false;
        }
    });
    csvdata.forEach(function(item, index){
        var score = 0;
        if(csvdata[index][3] < 5){ // small urban
            score = 1;
            if(csvdata[index][3] < 4){ // medium urban
                score = 2;
                if(csvdata[index][3] < 3){ // large urban
                    score = 3;
                }
            }
        }
        data_.push([
            data[index][0], // county
            data[index][1], // FIPS code
            score // rural/urban (0-3)
        ]);
    })
    return data_;
};

functions.readOldNew = function(data, csv){
    // var data_ = ['County', 'FIPS code', 'Rural/Urban (0-3)', 'Old/New (0-3)'];
    var data_ = [];
    var csvdata = [];
    var csvdata_ = [];
    csv = csv.split('\n');
    csv.forEach(function(item){
        item = item.split(',');
        var tot = Number(item[47]) + Number(item[48]) + Number(item[49]) + Number(item[50]) + Number(item[51]) + Number(item[52]) + Number(item[53]) + Number(item[54]);
        csvdata.push([
            item[0], // FIPS code (census tract)
            tot, // # of buildings
            item[47], // built before 40
            item[48], // built 40-49
            item[49], // built 50-59
            item[50], // built 60-69
            item[51], // built 70-79
            item[52], // built 80-89
            item[53], // built 90-98
            item[54] // built after 98
        ]);
    });
    data.forEach(function(county){
        var res = [
            county[1], // FIPS code (county)
            0, // # of buildings
            0, // built before 40
            0, // built 40-49
            0, // built 50-59
            0, // built 60-69
            0, // built 70-79
            0, // built 80-89
            0, // built 90-98
            0 // built after 98
        ];
        csvdata.forEach(function(item){ // sum over census tracts
            if(item[0].includes(county[1])){
                res[1] += Number(item[1]);
                res[2] += Number(item[2]);
                res[3] += Number(item[3]);
                res[4] += Number(item[4]);
                res[5] += Number(item[5]);
                res[6] += Number(item[6]);
                res[7] += Number(item[7]);
                res[8] += Number(item[8]);
                res[9] += Number(item[9]);
            }
        });
        csvdata_.push(res);
    });
    csvdata_.forEach(function(item, index){
        item[2] /= item[1]; // fraction built before 40
        item[3] /= item[1]; // fraction built 40-49
        item[4] /= item[1]; // fraction built 50-59
        item[5] /= item[1]; // fraction built 60-69
        item[6] /= item[1]; // fraction built 70-79
        item[7] /= item[1]; // fraction built 80-89
        item[8] /= item[1]; // fraction built 90-98
        item[9] /= item[1]; // fraction built after 98
        var score = 0;
        var res = 8*item[2] + 7*item[3] + 6*item[4] + 5*item[5] + 4*item[6] + 3*item[7] + 2*item[8] + 1*item[9];
        if(res>2){ // mostly built before 90
            score = 1;
            if(res>3){
                score = 2; // mostly built before 80
                if(res>4){
                    score = 3; // mostly built before 70
                }
            }
        }
        data_.push([
            data[index][0], // county
            data[index][1], // FIPS code
            data[index][2], // rural/urban (0-3)
            score // old/new (0-3)
        ]);
    });
    return data_;
};

functions.scores = function(data){
    // var data_ = ['County', 'FIPS code', 'Density Score (0-3)', 'Age Score (0-3)', 'Risk Score (0-3)'];
    var data_ = [];
    var imp = {
        den: 3, // qualitative importance
        age: 3 // qualitative importance
    };
    var score = null;
    data.forEach(function(county){
        score = imp.age*county[2] + imp.den*county[3];
        score = score/(imp.age + imp.den);
        score = Math.ceil(score); // round up
        data_.push([
            county[0], // county
            county[1], // FIPS code
            county[2], // density score (0-3)
            county[3], // age score (0-3)
            score // risk score (0-3)
        ]);
    });
    return data_;
};

functions.matchCoord = function(county, countyIndex, data){
    // data = ['County', 'FIPS code', 'Latitude', 'Longitude'];
    var coord_ = [
        '29.6580° N, 82.3018° W',
        '30.3931° N, 82.3018° W',
        '30.1805° N, 85.6846° W',
        '29.9724° N, 82.1714° W',
        '28.2639° N, 80.7214° W',
        '26.1901° N, 80.3659° W',
        '30.3475° N, 85.1894° W',
        '26.8946° N, 81.9098° W',
        '28.8849° N, 82.5186° W',
        '29.9944° N, 81.7787° W',
        '26.0700° N, 81.4279° W',
        '30.1813° N, 82.6051° W',
        '27.2142° N, 81.7787° W',
        '29.5207° N, 83.1649° W',
        '30.3501° N, 81.6035° W',
        '30.6389° N, 87.3414° W',
        '29.4086° N, 81.2519° W',
        '29.7818° N, 84.8568° W',
        '30.5563° N, 84.6479° W',
        '29.6871° N, 82.8210° W',
        '26.9844° N, 81.0755° W',
        '29.8002° N, 85.3550° W',
        '30.4756° N, 82.9502° W',
        '27.4502° N, 81.8224° W',
        '26.6105° N, 81.0755° W',
        '28.5579° N, 82.4753° W',
        '27.3400° N, 81.3400° W',
        '27.9904° N, 82.3018° W',
        '30.8741° N, 85.8077° W',
        '27.6948° N, 80.5438° W',
        '30.7151° N, 85.1894° W',
        '30.4312° N, 83.8897° W',
        '30.0300° N, 83.2078° W',
        '28.7028° N, 81.7787° W',
        '26.6630° N, 81.9535° W',
        '30.4906° N, 84.1857° W',
        '29.3179° N, 82.8210° W',
        '30.1508° N, 84.8568° W',
        '30.4586° N, 83.5070° W',
        '27.4799° N, 82.3452° W',
        '29.2788° N, 82.1278° W',
        '27.0805° N, 80.4104° W',
        '25.5516° N, 80.6327° W',
        '24.5557° N, 81.7826° W',
        '30.5927° N, 81.8224° W',
        '30.5773° N, 86.6611° W',
        '27.3462° N, 80.8987° W',
        '28.4845° N, 81.2519° W',
        '28.1020° N, 81.0755° W',
        '26.6515° N, 80.2767° W',
        '28.3232° N, 82.4319° W',
        '27.8764° N, 82.7779° W',
        '27.8617° N, 81.6912° W',
        '29.6265° N, 81.7787° W',
        '29.9719° N, 81.4279° W',
        '27.3226° N, 80.5438° W',
        '30.7690° N, 86.9824° W',
        '27.1996° N, 82.3452° W',
        '28.7132° N, 81.2078° W',
        '28.6748° N, 82.0843° W',
        '30.2485° N, 82.9932° W',
        '30.0994° N, 83.6774° W',
        '30.0745° N, 82.3452° W',
        '29.0280° N, 81.0755° W',
        '30.1302° N, 84.3542° W',
        '30.5640° N, 86.1752° W',
        '30.5487° N, 85.6846° W'
    ];
    coord_.forEach(function(item, index){
        item = item.replace('° N', '');
        item = item.replace('° W', '');
        item = item.split(', ');
        item[1] = '-' + item[1];
        coord_[index] = item;
    });
    data.push([
        county[0],
        county[1],
        coord_[countyIndex][0],
        coord_[countyIndex][1]
    ]);
};

// debugging in node
// module.exports = functions;